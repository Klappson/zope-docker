#! /usr/bin/python3
import os
import requests
import threading
import subprocess
from time import sleep


PG_VERSION = 14
PG_DATA = '/vol/postgres_data'
ZODBSYNC_CONFIG = '/root/zodbsync_config.py'
ZODBSYNC_DIR = '/vol/zoperepo'
CONFIG_DIR = '/vol/config'
ZOPE_DIR = os.path.join(ZODBSYNC_DIR, '__root__')


def get_pg_bin(bin_name):
    return os.path.join(f'/usr/lib/postgresql/{PG_VERSION}/bin', bin_name)


def get_pg_cfg(cfg_name):
    return os.path.join('/etc/postgresql/14/main/', cfg_name)


mkdirs = [
    PG_DATA,
    ZODBSYNC_DIR,
    CONFIG_DIR,
    os.path.join(CONFIG_DIR, 'postgres'),
]
programs = [
    ['su', 'postgres', '-c', f"{get_pg_bin('postgres')} -D {PG_DATA}"],
    ['zeo/bin/zeoctl', 'start'],
    ['zodbsync', '-c', ZODBSYNC_CONFIG, 'playback' , '--override', '/'],
    ['zodbsync', '-c', ZODBSYNC_CONFIG, 'watch'],
    ['runwsgi', 'wsgi/etc/zope.ini'],
]


def create_dirs(dirs, owner=None):
    print("\n\nCreating dirs...")
    for mkdir in dirs:
        print(f'Creating "{mkdir}"')
        subprocess.run(
            ['mkdir', '-p', mkdir]
        )

        if owner:
            subprocess.run(
                ['chown', 'postgres', mkdir]
            )


def run_programs(programs):
    print("\n\nCalling Binaries...")

    magic_number = 3
    for program in programs:
        print(f'\nStarting "{" ".join(program)}"')
        threading.Thread(
            target=subprocess.run,
            kwargs={'args': program},
            name=' '.join(program),
            daemon=False,
        ).start()
        sleep(magic_number)


def prepare_postgres():
    pg_setup_commands = [
        f'{get_pg_bin("initdb")} -D {PG_DATA}',
        f'{get_pg_bin("pg_ctl")} -D {PG_DATA} start',
        'psql -c \'CREATE DATABASE zopedb\'',
        'psql -c \'CREATE USER zope PASSWORD $$12345$$\'',
        'psql -c \'GRANT ALL PRIVILEGES ON DATABASE zopedb TO zope\'',
    ]

    for pg_setup_command in pg_setup_commands:
        su_command = ['su', 'postgres', '-c', pg_setup_command]
        print(f"\nrunning {su_command}")
        subprocess.run(su_command)


def prepare_default_configs():
    symlinks = [
        # target, linkname, default
        (os.path.join(CONFIG_DIR, 'zope.conf'),
         '/root/wsgi/etc/zope.conf',
         '/root/default_config/zope.conf'),
        
        (os.path.join(CONFIG_DIR, 'zope.ini'),
         '/root/wsgi/etc/zope.ini',
         '/root/default_config/zope.ini'),
        
        (os.path.join(CONFIG_DIR, 'postgres/postgresql.conf'),
         get_pg_cfg('postgresql.conf'),
         '/root/default_config/postgres/postgresql.conf'),
        
        (os.path.join(CONFIG_DIR, 'postgres/pg_hba.conf'),
         get_pg_cfg('pg_hba.conf'),
         '/root/default_config/postgres/pg_hba.conf')
    ]

    for symlink in symlinks:
        subprocess.run(['cp', '-R', symlink[2], symlink[0]])
        subprocess.run(['rm', symlink[1]])
        subprocess.run(['ln', '-s', symlink[0], symlink[1]])


def prepare_mounts():
    print("\n\nPreparing mounts...")
    
    subprocess.run(['chmod', '777', '/vol', '-R'])
    subprocess.run(['ls', '-lisah', '/vol'])

    subprocess.run(['chown', 'postgres', PG_DATA, '-R'])
    subprocess.run(['su', 'postgres', '-c', f'chmod 0750 {PG_DATA} -R'])

    subprocess.run(['ls', '-lisah', '/vol'])

    pg_setup_marker = os.path.join(PG_DATA, 'pg_setup_marker')
    if not os.path.isfile(pg_setup_marker):
        print(f"\n {pg_setup_marker} not found! Setting up postgres...")
        prepare_postgres()

        print(f'touching {pg_setup_marker}')
        subprocess.run(['touch', pg_setup_marker])
    
    cfg_setup_marker = os.path.join(CONFIG_DIR, 'cfg_setup_marker')
    if not os.path.isfile(cfg_setup_marker):
        print(f"\n {cfg_setup_marker} not found! Setting copying defaults...")
        prepare_default_configs()

        print(f'touching {cfg_setup_marker}')
        subprocess.run(['touch', cfg_setup_marker])



def call_zope_setup():
    setup_url = 'http://127.0.0.1:8080/setup'
    print(f'Calling "{setup_url}"')
    try:
        req = requests.get(setup_url)
        print(f"\n{req.content.decode()}")
    except:
        print('No setup-zopescript found')


def create_zope_objects():
    print('\n\nChecking for missing Zope-Objects...')
    default_objects = "/root/default_zope_objects/"
    target_elements = [
        'dockerdb',
        'setup'
    ]
    changes = False

    for target_element in target_elements:
        zope_path = os.path.join(ZOPE_DIR, target_element)
        if not os.path.isdir(zope_path):
            print(f'\n{target_element} missing! Adding it...')
            
            default_path = os.path.join(default_objects, target_element)
            subprocess.run(['cp', default_path, zope_path, '-R'])
            changes = True
    
    if changes:
        print('Playing back zope objects...')
        subprocess.run([
            'zodbsync', '-c', ZODBSYNC_CONFIG, 'playback', '--override' ,'/'])


if __name__ == '__main__':
    create_dirs(mkdirs, 'postgres')
    prepare_mounts()
    run_programs(programs)
    create_zope_objects()
    call_zope_setup()
